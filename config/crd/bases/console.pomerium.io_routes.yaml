---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.9.0
  creationTimestamp: null
  name: routes.console.pomerium.io
spec:
  group: console.pomerium.io
  names:
    kind: Route
    listKind: RouteList
    plural: routes
    singular: route
  scope: Namespaced
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: Route define Pomerium Enterprise Console namespace
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: RouteSpec defines a route.
            properties:
              from:
                description: Host is the route hostname.
                format: hostname
                type: string
              healthCheck:
                description: HealthCheck defines rules to detect if a particular upstream
                  endpoint is healthy.
                properties:
                  alwaysLogHealthCheckFailures:
                    description: If set to true, health check failure events will
                      always be logged. If set to false, only the initial health check
                      failure event will be logged. The default value is false.
                    type: boolean
                  healthyEdgeInterval:
                    description: "The \"healthy edge interval\" is a special health
                      check interval that is used for the first health check right
                      after a host is marked as healthy. For subsequent health checks
                      Envoy will shift back to using the standard health check interval
                      that is defined. \n The default value for \"healthy edge interval\"
                      is the same as the default interval."
                    type: string
                  healthyThreshold:
                    description: The number of healthy health checks required before
                      a host is marked healthy. Note that during startup, only a single
                      successful health check is required to mark a host healthy.
                    format: int32
                    type: integer
                  http:
                    description: HTTP health check
                    properties:
                      codecClientType:
                        description: Use specified application protocol for health
                          checks.
                        enum:
                        - HTTP1
                        - HTTP2
                        type: string
                      expectedStatuses:
                        description: Specifies a list of HTTP response statuses considered
                          healthy. If provided, replaces default 200-only policy -
                          200 must be included explicitly as needed. Ranges follow
                          half-open semantics of [start,end). The start and end of
                          each range are required. Only statuses in the range [100,
                          600) are allowed.
                        items:
                          description: Int64Range represents a [start,end) range.
                          properties:
                            end:
                              description: End of the range (exclusive)
                              format: int64
                              type: integer
                            start:
                              description: Start of the range (inclusive)
                              format: int64
                              type: integer
                          required:
                          - end
                          - start
                          type: object
                        type: array
                      host:
                        description: The value of the host header in the HTTP health
                          check request.
                        type: string
                      path:
                        description: Specifies the HTTP path that will be requested
                          during health checking.
                        type: string
                      requestHeadersToAdd:
                        description: Specifies a list of HTTP headers that should
                          be added to each request that is sent to the health checked
                          cluster. For more information, including details on header
                          value syntax, see the documentation customRequestHeaders
                        items:
                          description: HeaderValueOption defines a single header modification.
                          properties:
                            append:
                              description: Should the value be appended? If true (default),
                                the value is appended to existing values. Otherwise
                                it replaces any existing values.
                              type: boolean
                            key:
                              description: Key is a header key.
                              type: string
                            value:
                              description: Value is a header value. If nil, custom
                                headers with empty values are dropped. If value is
                                set to an empty string, the header would be added
                                with an empty value.
                              type: string
                          type: object
                        type: array
                      requestHeadersToRemove:
                        description: Specifies a list of HTTP headers that should
                          be removed from each request that is sent to the health
                          checked cluster.
                        items:
                          type: string
                        type: array
                      retriableStatuses:
                        description: Specifies a list of HTTP response statuses considered
                          retriable. If provided, responses in this range will count
                          towards the configured unhealthyThreshold, but will not
                          result in the host being considered immediately unhealthy.
                          Ranges follow half-open semantics of [start,end). The start
                          and end of each range are required. Only statuses in the
                          range [100, 600) are allowed. field takes precedence for
                          any range overlaps with this field i.e. if status code 200
                          is both retriable and expected, a 200 response will be considered
                          a successful health check. By default all responses not
                          in expectedStatuses will result in the host being considered
                          immediately unhealthy i.e. if status code 200 is expected
                          and there are no configured retriable statuses, any non-200
                          response will result in the host being marked unhealthy.
                        items:
                          description: Int64Range represents a [start,end) range.
                          properties:
                            end:
                              description: End of the range (exclusive)
                              format: int64
                              type: integer
                            start:
                              description: Start of the range (inclusive)
                              format: int64
                              type: integer
                          required:
                          - end
                          - start
                          type: object
                        type: array
                    required:
                    - path
                    type: object
                  initialJitter:
                    description: An optional jitter amount in milliseconds. If specified,
                      Envoy will start health checking after for a random time in
                      ms between 0 and initial_jitter. This only applies to the first
                      health check.
                    type: string
                  interval:
                    description: The interval between health checks.
                    type: string
                  intervalJitter:
                    description: An optional jitter amount in milliseconds. If specified,
                      during every interval Envoy will add interval_jitter to the
                      wait time.
                    type: string
                  intervalJitterPercent:
                    description: "An optional jitter amount as a percentage of interval_ms.
                      If specified, during every interval Envoy will add interval_ms
                      * interval_jitter_percent / 100 to the wait time. \n If interval_jitter_ms
                      and interval_jitter_percent are both set, both of them will
                      be used to increase the wait time."
                    format: int32
                    type: integer
                  noTrafficHealthyInterval:
                    description: "The \"no traffic healthy interval\" is a special
                      health check interval that is used for hosts that are currently
                      passing active health checking (including new hosts) when the
                      cluster has received no traffic. \n This is useful for when
                      we want to send frequent health checks with `no_traffic_interval`
                      but then revert to lower frequency `no_traffic_healthy_interval`
                      once a host in the cluster is marked as healthy. \n Once a cluster
                      has been used for traffic routing, Envoy will shift back to
                      using the standard health check interval that is defined. \n
                      If no_traffic_healthy_interval is not set, it will default to
                      the no traffic interval and send that interval regardless of
                      health state."
                    type: string
                  noTrafficInterval:
                    description: "The \"no traffic interval\" is a special health
                      check interval that is used when a cluster has never had traffic
                      routed to it. This lower interval allows cluster information
                      to be kept up to date, without sending a potentially large amount
                      of active health checking traffic for no reason. Once a cluster
                      has been used for traffic routing, Envoy will shift back to
                      using the standard health check interval that is defined. Note
                      that this interval takes precedence over any other. \n The default
                      value for \"no traffic interval\" is 60 seconds."
                    type: string
                  reuseConnection:
                    description: Reuse health check connection between health checks.
                      Default is true.
                    type: boolean
                  timeout:
                    description: The time to wait for a health check response. If
                      the timeout is reached the health check attempt will be considered
                      a failure.
                    type: string
                  unhealthyEdgeInterval:
                    description: "The \"unhealthy edge interval\" is a special health
                      check interval that is used for the first health check right
                      after a host is marked as unhealthy. For subsequent health checks
                      Envoy will shift back to using either \"unhealthy interval\"
                      if present or the standard health check interval that is defined.
                      \n The default value for \"unhealthy edge interval\" is the
                      same as \"unhealthy interval\"."
                    type: string
                  unhealthyInterval:
                    description: "The \"unhealthy interval\" is a health check interval
                      that is used for hosts that are marked as unhealthy. As soon
                      as the host is marked as healthy, Envoy will shift back to using
                      the standard health check interval that is defined. \n The default
                      value for \"unhealthy interval\" is the same as \"interval\"."
                    type: string
                  unhealthyThreshold:
                    description: The number of unhealthy health checks required before
                      a host is marked unhealthy. Note that for *http* health checking
                      if a host responds with a code not in expectedStatuses retriableStatuses,
                      this threshold is ignored and the host is considered immediately
                      unhealthy.
                    format: int32
                    type: integer
                required:
                - interval
                - timeout
                type: object
              idleTimeout:
                description: IdleTimeout defines per-route idle timeout value.
                type: string
              isTCP:
                description: isTCP indicates the route is a TCP tunnel.
                type: boolean
              loadBalancing:
                description: LoadBalancing defines load balancing method.
                properties:
                  leastRequest:
                    description: LeastRequestLB load balancing policy.
                    type: object
                  maglev:
                    description: MaglevLB is a hashing load balancer.
                    type: object
                  ringHash:
                    description: RingHashLB is a hashing load balancer.
                    type: object
                  roundRobin:
                    description: RoundRobinLB implements a default iterative load
                      balancing policy.
                    type: object
                type: object
              outlierDetection:
                description: OutlierDetection enables passive endpoint health check
                  detection based on observed responses.
                properties:
                  baseEjectionTime:
                    description: The base time that a host is ejected for. The real
                      time is equal to the base time multiplied by the number of times
                      the host has been ejected and is capped by maxEjectionTime.
                      Defaults to 30000ms or 30s.
                    type: string
                  consecutive5xx:
                    description: The number of consecutive 5xx responses or local
                      origin errors that are mapped to 5xx error codes before a consecutive
                      5xx ejection occurs. Defaults to 5.
                    format: int32
                    type: integer
                  consecutiveGatewayFailure:
                    description: The number of consecutive gateway failures (502,
                      503, 504 status codes) before a consecutive gateway failure
                      ejection occurs. Defaults to 5.
                    format: int32
                    type: integer
                  consecutiveLocalOriginFailure:
                    description: The number of consecutive locally originated failures
                      before ejection occurs. Defaults to 5. Parameter takes effect
                      only when splitExternalLocalOriginErrors is set to true.
                    format: int32
                    type: integer
                  enforcingConsecutive5xx:
                    description: The % chance that a host will be actually ejected
                      when an outlier status is detected through consecutive 5xx.
                      This setting can be used to disable ejection or to ramp it up
                      slowly. Defaults to 100.
                    format: int32
                    type: integer
                  enforcingConsecutiveGatewayFailure:
                    description: The % chance that a host will be actually ejected
                      when an outlier status is detected through consecutive gateway
                      failures. This setting can be used to disable ejection or to
                      ramp it up slowly. Defaults to 0.
                    format: int32
                    type: integer
                  enforcingConsecutiveLocalOriginFailure:
                    description: The % chance that a host will be actually ejected
                      when an outlier status is detected through consecutive locally
                      originated failures. This setting can be used to disable ejection
                      or to ramp it up slowly. Defaults to 100. Parameter takes effect
                      only when splitExternalLocalOriginErrors is set to true.
                    format: int32
                    type: integer
                  enforcingFailurePercentage:
                    description: The % chance that a host will be actually ejected
                      when an outlier status is detected through failure percentage
                      statistics. This setting can be used to disable ejection or
                      to ramp it up slowly. Defaults to 0.
                    format: int32
                    type: integer
                  enforcingFailurePercentageLocalOrigin:
                    description: The % chance that a host will be actually ejected
                      when an outlier status is detected through local-origin failure
                      percentage statistics. This setting can be used to disable ejection
                      or to ramp it up slowly. Defaults to 0.
                    format: int32
                    type: integer
                  enforcingLocalOriginSuccessRate:
                    description: The % chance that a host will be actually ejected
                      when an outlier status is detected through success rate statistics
                      for locally originated errors. This setting can be used to disable
                      ejection or to ramp it up slowly. Defaults to 100. Parameter
                      takes effect only when splitExternalLocalOriginErrors is set
                      to true.
                    format: int32
                    type: integer
                  enforcingSuccessRate:
                    description: The % chance that a host will be actually ejected
                      when an outlier status is detected through success rate statistics.
                      This setting can be used to disable ejection or to ramp it up
                      slowly. Defaults to 100.
                    format: int32
                    type: integer
                  failurePercentageMinimumHosts:
                    description: The minimum number of hosts in a cluster in order
                      to perform failure percentage-based ejection. If the total number
                      of hosts in the cluster is less than this value, failure percentage-based
                      ejection will not be performed. Defaults to 5.
                    format: int32
                    type: integer
                  failurePercentageRequestVolume:
                    description: The minimum number of total requests that must be
                      collected in one interval (as defined by the interval duration
                      above) to perform failure percentage-based ejection for this
                      host. If the volume is lower than this setting, failure percentage-based
                      ejection will not be performed for this host. Defaults to 50.
                    format: int32
                    type: integer
                  failurePercentageThreshold:
                    description: The failure percentage to use when determining failure
                      percentage-based outlier detection. If the failure percentage
                      of a given host is greater than or equal to this value, it will
                      be ejected. Defaults to 85.
                    format: int32
                    type: integer
                  interval:
                    description: The time interval between ejection analysis sweeps.
                      This can result in both new ejections as well as hosts being
                      returned to service. Defaults to 10000ms or 10s.
                    type: string
                  maxEjectionPercent:
                    description: The maximum % of an upstream cluster that can be
                      ejected due to outlier detection. Defaults to 10% but will eject
                      at least one host regardless of the value.
                    format: int32
                    type: integer
                  maxEjectionTime:
                    description: The maximum time that a host is ejected for. See
                      baseEjectionTime for more information. If not specified, the
                      default value (300000ms or 300s) or baseEjectionTime value is
                      applied, whatever is larger.
                    type: string
                  maxEjectionTimeJitter:
                    description: The maximum amount of jitter to add to the ejection
                      time, in order to prevent a 'thundering herd' effect where all
                      proxies try to reconnect to host at the same time. baseEjectionTime.
                      Defaults to 0s.
                    type: string
                  splitExternalLocalOriginErrors:
                    description: 'Determines whether to distinguish local origin failures
                      from external errors. If set to true the following configuration
                      parameters are taken into account: consecutiveLocalOriginFailure,
                      enforcingConsecutiveLocalOriginFailure and enforcingLocalOriginSuccessRate
                      Defaults to false.'
                    type: boolean
                  successRateMinimumHosts:
                    description: The number of hosts in a cluster that must have enough
                      request volume to detect success rate outliers. If the number
                      of hosts is less than this setting, outlier detection via success
                      rate statistics is not performed for any host in the cluster.
                      Defaults to 5.
                    format: int32
                    type: integer
                  successRateRequestVolume:
                    description: The minimum number of total requests that must be
                      collected in one interval (as defined by the interval duration
                      above) to include this host in success rate based outlier detection.
                      If the volume is lower than this setting, outlier detection
                      via success rate statistics is not performed for that host.
                      Defaults to 100.
                    format: int32
                    type: integer
                  successRateStdevFactor:
                    description: 'This factor is used to determine the ejection threshold
                      for success rate outlier ejection. The ejection threshold is
                      the difference between the mean success rate, and the product
                      of this factor and the standard deviation of the mean success
                      rate: mean - (stdev * success_rate_stdev_factor). This factor
                      is divided by a thousand to get a double. That is, if the desired
                      factor is 1.9, the runtime value should be 1900. Defaults to
                      1900.'
                    format: int32
                    type: integer
                type: object
              path:
                description: Path would match route if the request path is an exact
                  match.
                type: string
              policies:
                description: Policies lists names of the policies within the same
                  kubernetes namespace this route should apply.
                items:
                  type: string
                type: array
                uniqueItems: true
              prefix:
                description: Prefix would match route by path prefix.
                type: string
              redirect:
                description: Redirect would serve a redirect in case of a match.
                properties:
                  host:
                    description: Host will replace host in the URL with the literal
                      value.
                    format: uri
                    type: string
                  port:
                    description: Port replaces port in the URL.
                    format: int32
                    type: integer
                  responseCode:
                    description: responseCode customizes the redirect response code.
                    enum:
                    - MOVED_PERMANENTLY
                    - FOUND
                    - SEE_OTHER
                    - TEMPORARY_REDIRECT
                    - PERMANENT_REDIRECT
                    type: string
                  stripQuery:
                    description: StripQuery removes the query string.
                    type: boolean
                type: object
              regex:
                description: Regex would match route if the request path matches RE2
                  regular expression.
                properties:
                  pattern:
                    description: Pattern to match in RE2
                    type: string
                  priority:
                    description: Priority, if set, sorts routes in descending order
                      for matching
                    format: int64
                    type: integer
                type: object
              requestHeaders:
                description: Redirect would modify request headers before they are
                  presented to the upstream.
                properties:
                  authorization:
                    description: authorization send a user's identity token through
                      as a bearer token in the Authorization header. Use ACCESS_TOKEN
                      to send the OAuth access token, ID_TOKEN to send the OIDC ID
                      token, or PASS_THROUGH (the default) to leave the Authorization
                      header unchanged from the client when it's not used for Pomerium
                      authentication.
                    enum:
                    - ACCESS_TOKEN
                    - ID_TOKEN
                    - PASS_THROUGH
                    type: string
                  passIdentity:
                    description: PassIdentity would pass user identity information
                      in X-Pomerium-JWT-Assertion header.
                    type: boolean
                  remove:
                    description: Remove removes listen headers from the request.
                    items:
                      type: string
                    type: array
                  set:
                    additionalProperties:
                      type: string
                    description: Set sets specified request headers. You may not modify
                      some of the reserved names such as Host header.
                    type: object
                type: object
              rewrite:
                description: Rewrite would rewrite parts of the request before it
                  is sent upstream.
                properties:
                  host:
                    description: HostRewrite defines Host header behavior during proxying
                      the request.
                    properties:
                      header:
                        description: Header will rewrite the host to match an incoming
                          header value.
                        type: string
                      preserve:
                        description: Preserve will, when enabled, this option will
                          pass the host header from the incoming request to the proxied
                          host, instead of the destination hostname. It's an optional
                          parameter of type bool that defaults to false.
                        type: boolean
                      regex:
                        description: Regex will rewrite the host according to a regex
                          matching the path.
                        properties:
                          pattern:
                            description: pattern to match, should be RE2 format including
                              ^ and $
                            type: string
                          substitution:
                            description: substitution the value to rewrite to
                            type: string
                        type: object
                      rewrite:
                        description: Rewrite will rewrite the host to a new literal
                          value.
                        type: string
                    type: object
                  path:
                    description: PathRewrite rewrites the path.
                    properties:
                      prefix:
                        description: Prefix replaces path prefix with the provided
                          value.
                        type: string
                      regex:
                        description: Regex replaces just the matching part of the
                          path.
                        properties:
                          pattern:
                            description: Pattern to match
                            type: string
                          substitution:
                            description: Substitution value to replace with.
                            type: string
                        type: object
                    type: object
                  responseHeaders:
                    items:
                      description: RouteRewriteHeader defines HTTP header rewrite
                        rules.
                      properties:
                        header:
                          description: Header key
                          type: string
                        prefix:
                          description: Prefix will be replaced with value.
                          type: string
                        value:
                          description: Literal value to replace with.
                          type: string
                      type: object
                    type: array
                type: object
              spdy:
                description: spdy if set, enables proxying of SPDY protocol upgrades.
                type: boolean
              timeout:
                description: Timeout specifies per-route global timeout value.
                type: string
              to:
                description: To defines list of upstream URLs.
                format: uri
                items:
                  type: string
                type: array
                uniqueItems: true
              toService:
                description: ToService defines list of upstream URLs as a reference
                  to Kubernetes service.
                properties:
                  name:
                    description: Name should is the referenced service. The service
                      must exist in the same namespace.
                    type: string
                  port:
                    description: Port of the referenced service. A port name or port
                      number is required.
                    properties:
                      name:
                        description: Name is the name of the port on the Service.
                          This is a mutually exclusive setting with "number".
                        type: string
                      port:
                        description: Number is the numerical port number (e.g. 80)
                          on the Service. This is a mutually exclusive setting with
                          "Name".
                        format: int32
                        type: integer
                    type: object
                  useServiceProxy:
                    description: UseServiceProxy if set to true, would use kube-proxy
                      instead of dynamically watching service endpoints.
                    type: boolean
                  useTLS:
                    description: useTLS enables TLS when communicating to the service
                    type: boolean
                required:
                - name
                - port
                type: object
              websocket:
                description: websocket if set, indicates websocket protocol would
                  be served over that route.
                type: boolean
            required:
            - from
            type: object
          status:
            description: ResourceStatus represents the outcome of the latest attempt
              to reconcile it with Pomerium.
            properties:
              error:
                description: Error that prevented latest observedGeneration to be
                  synchronized with Pomerium.
                type: string
              observedAt:
                description: ObservedAt is when last reconciliation attempt was made.
                format: date-time
                type: string
              observedGeneration:
                description: ObservedGeneration represents the .metadata.generation
                  that was last presented to Pomerium.
                format: int64
                type: integer
              reconciled:
                description: Reconciled is whether this object generation was successfully
                  synced with pomerium.
                type: boolean
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
